#Использовать lambdas
#Использовать "../internal"

#Область ПрограммныйИнтерфейс

// Выполняет асинхронно переданную лямбду
//
// Параметры:
//  Алгоритм   - Строка - Лямбда выражение которое требуется исполнить
//  Объект     - Сценарий - Объект который необходимо захватить в лямбду
//  Параметры  - Массив из Произвольный - Параметры алгоритма
//  Длительное - Булево - Длительное задание для которого нужно выделить отдельный поток
//
// Возвращаемое значение:
//  Обещание - Обещание о выполнении переданного алгоритма
//
Функция ВыполнитьЛямбду(Знач Алгоритм, Объект, Параметры, Длительное = Ложь) Экспорт

	Алгоритм = Лямбда.Выражение(Алгоритм)
		.ЗахватитьОбъект(Объект)
		.ВДействие();

	Результат = Новый Обещание(Алгоритм, Параметры, , Длительное);

	ОбещанияСлужебный.ЗапуститьВыполнениеОбещания(Результат);

	Возврат Результат;

КонецФункции

// Выполняет асинхронно переданный делегат
//
// Параметры:
//  Действие  - Действие - Делегат на метод который требуется исполнить
//  Параметры - Массив из Произвольный - Параметры метода
//  Длительное - Булево - Длительное задание для которого нужно выделить отдельный поток
//
// Возвращаемое значение:
//  Обещание - Обещание о выполнении переданного метода
//
Функция ВыполнитьДелегат(Действие, Параметры, Длительное = Ложь) Экспорт

	Результат = Новый Обещание(Действие, Параметры, , Длительное);

	ОбещанияСлужебный.ЗапуститьВыполнениеОбещания(Результат);

	Возврат Результат;

КонецФункции

// Ожидает исполнение всех переданных обещаний
//
// Параметры:
//  Обещания - Массив из Обещание - Обещания которых ожидаем
//  Таймаут -  Число- Количество миллисекунд по истечении которых будет выброшено исключение
//
Процедура ОжидатьВсе(Обещания, Таймаут = 0) Экспорт
	ОбещанияСлужебный.ОжидатьВсе(Обещания, Таймаут);
КонецПроцедуры

#КонецОбласти
