#Использовать lambdas

#Область ОписаниеПеременных

Перем Задание; // Задание которое исполняет обещание

// Контекст исполнения обещания
Перем КонтекстВыполнения; // BSLLS:UnusedLocalVariable-off Доступ через рефлектор в служебном интерфейсе

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Получает результат исполнения обещания
//
// Параметры:
//  Таймаут - Число - Время в миллисекундах в течении которого нужно ожидать завершения задания,
//   если время ожидания будет превышено, будет выброшено исключение
//
// Возвращаемое значение:
//  Произвольный - Результат исполнения обещания
//
Функция Получить(Таймаут = 0) Экспорт

	Дождались = Задание.ОжидатьЗавершения(Таймаут);

	Если Дождались И Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Возврат Задание.Результат;
	ИначеЕсли Не Дождались Тогда
		ВызватьИсключение "Превышено время ожидания получения результата";
	Иначе
		ВызватьИсключение ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
	КонецЕсли;

КонецФункции

// После получения результата запускает ещё одно задание которое будет асинхронно
//  выполнять переданный алгоритм над результатом
//
// Параметры:
//  Алгоритм - Строка - Лямбда выражение функция с одним параметром, которая принимает результат исполнения
//   текущего обещания и возвращает новый результат
//           - Действие - Делегат на функцию с одним параметром, которая принимает результат исполнения
//   текущего обещания и возвращает новый результат
//
// Возвращаемое значение:
//  Обещание - Обещание об исполнение алгоритма над результатом исполнения текущего обещания
//
Функция Затем(Знач Алгоритм) Экспорт

	Если ТипЗнч(Алгоритм) = Тип("Строка") Тогда

		Алгоритм = Лямбда.Выражение(Алгоритм)
			.Интерфейс(ФункциональныеИнтерфейсы.УниФункция())
			.ВДействие();

	КонецЕсли;

	Результат = Новый Обещание(Алгоритм, ЭтотОбъект);

	АсинхронностьСлужебный.ЗапуститьВыполнениеОбещания(Результат);

	Возврат Результат;

КонецФункции

// В случае если в нижестоящих обещаниях будет выброшено исключение, оно будет перехвачено
//  и передано в указанный алгоритм.
//
// Параметры:
//  Алгоритм - Строка - Лямбда выражение функция с одним параметром, которая принимает ИнформацияОбОшибке
//   нижестоящих обещаний и возвращает новый результат
//           - Действие - Делегат на функцию с одним параметром, которая принимает ИнформацияОбОшибке
//   нижестоящих обещаний и возвращает новый результат
//
// Возвращаемое значение:
//  Обещание - Обещание о выполнении алгоритма в случае возникновения исключения
//
Функция Поймать(Алгоритм) Экспорт

	Если ТипЗнч(Алгоритм) = Тип("Строка") Тогда

		Алгоритм = Лямбда.Выражение(Алгоритм)
			.Интерфейс(ФункциональныеИнтерфейсы.УниФункция())
			.ВДействие();

	КонецЕсли;

	Результат = Новый Обещание(Алгоритм, ЭтотОбъект, Истина);

	АсинхронностьСлужебный.ЗапуститьВыполнениеОбещания(Результат);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта(Алгоритм, Параметры, ПерехватчикИсключения = Ложь)

	КонтекстВыполнения = Новый КонтекстВыполненияОбещания(
		Алгоритм,
		Параметры,
		ПерехватчикИсключения
	);

КонецПроцедуры

#КонецОбласти
